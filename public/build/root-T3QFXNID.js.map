{
  "version": 3,
  "sources": ["../../app/root.tsx", "../../app/styles/server.context.tsx"],
  "sourcesContent": ["import { withEmotionCache } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport type { MetaFunction } from \"@remix-run/node\";\nimport {\n    Links,\n    LiveReload,\n    Meta,\n    Outlet,\n    Scripts,\n    ScrollRestoration,\n    useCatch,\n} from \"@remix-run/react\";\nimport { useContext, useEffect, useRef } from \"react\";\n\nimport ClientStyleContext from \"~/styles/client.context\";\nimport ServerStyleContext from \"~/styles/server.context\";\n\nconst Container = styled(\"div\")`\n  background-color: #ff0000;\n  padding: 1em;\n`;\n\nexport const meta: MetaFunction = () => ({\n    charset: \"utf-8\",\n    title: \"About Me\",\n    viewport: \"width=device-width,initial-scale=1\",\n});\n\ninterface DocumentProps {\n    children: React.ReactNode;\n    title?: string;\n}\n\nconst Body = styled(\"body\")`\n  color: #5E6E80;\n  font-family: \"Poppins\", sans-serif;\n  font-weight: 400;\n  font-size: 0.875rem;\n  line-height: 1.7;\n  min-height: 100vh;\n  overflow-x: hidden;\n  -ms-overflow-style: scrollbar;\n  -webkit-font-smoothing: antialiased;\n  margin: 0;\n  display: block;\n`;\n\nconst Document = withEmotionCache(\n    ({ children, title }: DocumentProps, emotionCache) => {\n        const serverStyleData = useContext(ServerStyleContext);\n        const clientStyleData = useContext(ClientStyleContext);\n        const reinjectStylesRef = useRef(true);\n\n        // Only executed on client\n        // When a top level ErrorBoundary or CatchBoundary are rendered,\n        // the document head gets removed, so we have to create the style tags\n        useEffect(() => {\n            if (!reinjectStylesRef.current) {\n                return;\n            }\n            // re-link sheet container\n            emotionCache.sheet.container = document.head;\n\n            // re-inject tags\n            const tags = emotionCache.sheet.tags;\n            emotionCache.sheet.flush();\n            tags.forEach((tag) => {\n                (emotionCache.sheet as any)._insertTag(tag);\n            });\n\n            // reset cache to re-apply global styles\n            clientStyleData.reset();\n            // ensure we only do this once per mount\n            reinjectStylesRef.current = false;\n        }, [clientStyleData, emotionCache.sheet]);\n\n        return (\n            <html lang=\"en\">\n            <head>\n                {title ? <title>{title}</title> : null}\n                <Meta />\n                <Links />\n                {serverStyleData?.map(({ key, ids, css }) => (\n                    <style\n                        key={key}\n                        data-emotion={`${key} ${ids.join(\" \")}`}\n                        // eslint-disable-next-line react/no-danger\n                        dangerouslySetInnerHTML={{ __html: css }}\n                    />\n                ))}\n            </head>\n            <Body>\n                {children}\n                <ScrollRestoration />\n                <Scripts />\n                <LiveReload />\n            </Body>\n            </html>\n        );\n    },\n);\n\nexport default function App() {\n    return (\n        <Document>\n            <Outlet />\n        </Document>\n    );\n}\n\nexport function CatchBoundary() {\n    const caught = useCatch();\n\n    return (\n        <Document title={`${caught.status} ${caught.statusText}`}>\n            <Container>\n                <p>\n                    [CatchBoundary]: {caught.status} {caught.statusText}\n                </p>\n            </Container>\n        </Document>\n    );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n    return (\n        <Document title=\"Error!\">\n            <Container>\n                <p>[ErrorBoundary]: There was an error: {error.message}</p>\n            </Container>\n        </Document>\n    );\n}\n", "import { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n    key: string;\n    ids: Array<string>;\n    css: string;\n}\n\nconst ServerStyleContext = createContext<null | ServerStyleContextData[]>(null);\n\nexport default ServerStyleContext;\n"],
  "mappings": "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",
  "names": ["import_react"]
}
